#map = affine_map<(d0, d1, d2, d3) -> (d1)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @forward(%arg0: tensor<1x4x224x224xf32>) -> tensor<1x2048x7x7xf32> attributes {input_names = ["global_input_0"], output_names = ["global_outout_0"]} {
    %cst = arith.constant dense<2.000000e-02> : tensor<64x4x7x7xf32>
    %cst_0 = arith.constant dense<0.00999999977> : tensor<64xf32>
    %cst_1 = arith.constant dense<2.000000e-02> : tensor<64x64x1x1xf32>
    %cst_2 = arith.constant dense<2.000000e-02> : tensor<64x64x3x3xf32>
    %cst_3 = arith.constant dense<2.000000e-02> : tensor<256x64x1x1xf32>
    %cst_4 = arith.constant dense<0.00999999977> : tensor<256xf32>
    %cst_5 = arith.constant dense<2.000000e-02> : tensor<64x256x1x1xf32>
    %cst_6 = arith.constant dense<2.000000e-02> : tensor<128x256x1x1xf32>
    %cst_7 = arith.constant dense<0.00999999977> : tensor<128xf32>
    %cst_8 = arith.constant dense<2.000000e-02> : tensor<128x128x3x3xf32>
    %cst_9 = arith.constant dense<2.000000e-02> : tensor<512x128x1x1xf32>
    %cst_10 = arith.constant dense<0.00999999977> : tensor<512xf32>
    %cst_11 = arith.constant dense<2.000000e-02> : tensor<512x256x1x1xf32>
    %cst_12 = arith.constant dense<2.000000e-02> : tensor<128x512x1x1xf32>
    %cst_13 = arith.constant dense<2.000000e-02> : tensor<256x512x1x1xf32>
    %cst_14 = arith.constant dense<2.000000e-02> : tensor<256x256x3x3xf32>
    %cst_15 = arith.constant dense<2.000000e-02> : tensor<1024x256x1x1xf32>
    %cst_16 = arith.constant dense<0.00999999977> : tensor<1024xf32>
    %cst_17 = arith.constant dense<2.000000e-02> : tensor<1024x512x1x1xf32>
    %cst_18 = arith.constant dense<2.000000e-02> : tensor<256x1024x1x1xf32>
    %cst_19 = arith.constant dense<2.000000e-02> : tensor<512x1024x1x1xf32>
    %cst_20 = arith.constant dense<2.000000e-02> : tensor<512x512x3x3xf32>
    %cst_21 = arith.constant dense<2.000000e-02> : tensor<2048x512x1x1xf32>
    %cst_22 = arith.constant dense<0.00999999977> : tensor<2048xf32>
    %cst_23 = arith.constant dense<2.000000e-02> : tensor<2048x1024x1x1xf32>
    %cst_24 = arith.constant dense<2.000000e-02> : tensor<512x2048x1x1xf32>
    %cst_25 = arith.constant 0.000000e+00 : f32
    %cst_26 = arith.constant -3.40282347E+38 : f32
    %padded = tensor.pad %arg0 low[0, 0, 3, 3] high[0, 0, 3, 3] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x4x224x224xf32> to tensor<1x4x230x230xf32>
    %0 = tensor.empty() : tensor<1x64x56x56xf32>
    %1 = linalg.fill ins(%cst_26 : f32) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %2 = linalg.conv_2d_relu_maxpool {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 4, 12, 232]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 1, 56]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<0> : vector<4xindex>, l2_nchw_extend_end_output = dense<0> : vector<4xindex>, layer_name = "Conv_0", mllib_conv_type = 4 : index, mpDilations = dense<1> : tensor<2xi64>, mpKernelSize = dense<3> : tensor<2xi64>, mpPadding = dense<1> : tensor<4xi64>, mpStrides = dense<2> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%padded, %cst, %cst_0 : tensor<1x4x230x230xf32>, tensor<64x4x7x7xf32>, tensor<64xf32>) outs(%1 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %3 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 7, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<0> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_1", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%2, %cst_1, %cst_0 : tensor<1x64x56x56xf32>, tensor<64x64x1x1xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %padded_27 = tensor.pad %3 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x64x56x56xf32> to tensor<1x64x58x58xf32>
    %4 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_3", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_27, %cst_2, %cst_0 : tensor<1x64x58x58xf32>, tensor<64x64x3x3xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %5 = tensor.empty() : tensor<1x256x56x56xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_4 : tensor<256xf32>) outs(%5 : tensor<1x256x56x56xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x256x56x56xf32>
    %7 = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<0> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_2", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%2, %cst_3 : tensor<1x64x56x56xf32>, tensor<256x64x1x1xf32>) outs(%6 : tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %8 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_4", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%4, %cst_3, %cst_4, %7 : tensor<1x64x56x56xf32>, tensor<256x64x1x1xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) outs(%5 : tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %9 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 7, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_5", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%8, %cst_5, %cst_0 : tensor<1x256x56x56xf32>, tensor<64x256x1x1xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %padded_28 = tensor.pad %9 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x64x56x56xf32> to tensor<1x64x58x58xf32>
    %10 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_6", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_28, %cst_2, %cst_0 : tensor<1x64x58x58xf32>, tensor<64x64x3x3xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %11 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_7", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%10, %cst_3, %cst_4, %8 : tensor<1x64x56x56xf32>, tensor<256x64x1x1xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) outs(%5 : tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %12 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 7, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_8", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%11, %cst_5, %cst_0 : tensor<1x256x56x56xf32>, tensor<64x256x1x1xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %padded_29 = tensor.pad %12 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x64x56x56xf32> to tensor<1x64x58x58xf32>
    %13 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<64> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 64]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_9", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_29, %cst_2, %cst_0 : tensor<1x64x58x58xf32>, tensor<64x64x3x3xf32>, tensor<64xf32>) outs(%0 : tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32>
    %14 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 8]> : vector<4xindex>, layer_name = "Conv_10", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%13, %cst_3, %cst_4, %11 : tensor<1x64x56x56xf32>, tensor<256x64x1x1xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) outs(%5 : tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %15 = tensor.empty() : tensor<1x128x56x56xf32>
    %16 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 3, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 3, 16]> : vector<4xindex>, l1_tile_permute = dense<[3, 1, 2, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 8]> : vector<4xindex>, layer_name = "Conv_11", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%14, %cst_6, %cst_7 : tensor<1x256x56x56xf32>, tensor<128x256x1x1xf32>, tensor<128xf32>) outs(%15 : tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32>
    %padded_30 = tensor.pad %16 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x128x56x56xf32> to tensor<1x128x58x58xf32>
    %17 = tensor.empty() : tensor<1x128x28x28xf32>
    %18 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 16, 4, 66]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_13", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%padded_30, %cst_8, %cst_7 : tensor<1x128x58x58xf32>, tensor<128x128x3x3xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %19 = tensor.empty() : tensor<1x512x28x28xf32>
    %20 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_10 : tensor<512xf32>) outs(%19 : tensor<1x512x28x28xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x512x28x28xf32>
    %21 = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 2, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 8]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_12", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%14, %cst_11 : tensor<1x256x56x56xf32>, tensor<512x256x1x1xf32>) outs(%20 : tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %22 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_14", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%18, %cst_9, %cst_10, %21 : tensor<1x128x28x28xf32>, tensor<512x128x1x1xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) outs(%19 : tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %23 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_15", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%22, %cst_12, %cst_7 : tensor<1x512x28x28xf32>, tensor<128x512x1x1xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %padded_31 = tensor.pad %23 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x128x28x28xf32> to tensor<1x128x30x30xf32>
    %24 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_16", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_31, %cst_8, %cst_7 : tensor<1x128x30x30xf32>, tensor<128x128x3x3xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %25 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_17", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%24, %cst_9, %cst_10, %22 : tensor<1x128x28x28xf32>, tensor<512x128x1x1xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) outs(%19 : tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %26 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_18", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%25, %cst_12, %cst_7 : tensor<1x512x28x28xf32>, tensor<128x512x1x1xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %padded_32 = tensor.pad %26 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x128x28x28xf32> to tensor<1x128x30x30xf32>
    %27 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_19", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_32, %cst_8, %cst_7 : tensor<1x128x30x30xf32>, tensor<128x128x3x3xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %28 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_20", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%27, %cst_9, %cst_10, %25 : tensor<1x128x28x28xf32>, tensor<512x128x1x1xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) outs(%19 : tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %29 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_21", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%28, %cst_12, %cst_7 : tensor<1x512x28x28xf32>, tensor<128x512x1x1xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %padded_33 = tensor.pad %29 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x128x28x28xf32> to tensor<1x128x30x30xf32>
    %30 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 9, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 7, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 128]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_22", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_33, %cst_8, %cst_7 : tensor<1x128x30x30xf32>, tensor<128x128x3x3xf32>, tensor<128xf32>) outs(%17 : tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32>
    %31 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_23", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%30, %cst_9, %cst_10, %28 : tensor<1x128x28x28xf32>, tensor<512x128x1x1xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) outs(%19 : tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %32 = tensor.empty() : tensor<1x256x28x28xf32>
    %33 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 1, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 1, 32]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 0, 4]> : vector<4xindex>, layer_name = "Conv_24", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%31, %cst_13, %cst_4 : tensor<1x512x28x28xf32>, tensor<256x512x1x1xf32>, tensor<256xf32>) outs(%32 : tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
    %padded_34 = tensor.pad %33 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x28x28xf32> to tensor<1x256x30x30xf32>
    %34 = tensor.empty() : tensor<1x256x14x14xf32>
    %35 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 16, 10, 34]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_26", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%padded_34, %cst_14, %cst_4 : tensor<1x256x30x30xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %36 = tensor.empty() : tensor<1x1024x14x14xf32>
    %37 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_16 : tensor<1024xf32>) outs(%36 : tensor<1x1024x14x14xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x1024x14x14xf32>
    %38 = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 2, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 1, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 0, 4]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_25", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%31, %cst_17 : tensor<1x512x28x28xf32>, tensor<1024x512x1x1xf32>) outs(%37 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %39 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_27", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%35, %cst_15, %cst_16, %38 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %40 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_28", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%39, %cst_18, %cst_4 : tensor<1x1024x14x14xf32>, tensor<256x1024x1x1xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %padded_35 = tensor.pad %40 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x14x14xf32> to tensor<1x256x16x16xf32>
    %41 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 6, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_29", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_35, %cst_14, %cst_4 : tensor<1x256x16x16xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %42 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_30", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%41, %cst_15, %cst_16, %39 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %43 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_31", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%42, %cst_18, %cst_4 : tensor<1x1024x14x14xf32>, tensor<256x1024x1x1xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %padded_36 = tensor.pad %43 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x14x14xf32> to tensor<1x256x16x16xf32>
    %44 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 6, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_32", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_36, %cst_14, %cst_4 : tensor<1x256x16x16xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %45 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_33", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%44, %cst_15, %cst_16, %42 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %46 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_34", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%45, %cst_18, %cst_4 : tensor<1x1024x14x14xf32>, tensor<256x1024x1x1xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %padded_37 = tensor.pad %46 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x14x14xf32> to tensor<1x256x16x16xf32>
    %47 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 6, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_35", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_37, %cst_14, %cst_4 : tensor<1x256x16x16xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %48 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_36", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%47, %cst_15, %cst_16, %45 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %49 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_37", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%48, %cst_18, %cst_4 : tensor<1x1024x14x14xf32>, tensor<256x1024x1x1xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %padded_38 = tensor.pad %49 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x14x14xf32> to tensor<1x256x16x16xf32>
    %50 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 6, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_38", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_38, %cst_14, %cst_4 : tensor<1x256x16x16xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %51 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_39", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%50, %cst_15, %cst_16, %48 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %52 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_40", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%51, %cst_18, %cst_4 : tensor<1x1024x14x14xf32>, tensor<256x1024x1x1xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %padded_39 = tensor.pad %52 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x256x14x14xf32> to tensor<1x256x16x16xf32>
    %53 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 6, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 256]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_41", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_39, %cst_14, %cst_4 : tensor<1x256x16x16xf32>, tensor<256x256x3x3xf32>, tensor<256xf32>) outs(%34 : tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
    %54 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 1024]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_42", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%53, %cst_15, %cst_16, %51 : tensor<1x256x14x14xf32>, tensor<1024x256x1x1xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) outs(%36 : tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %55 = tensor.empty() : tensor<1x512x14x14xf32>
    %56 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 4, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 2, 2]> : vector<4xindex>, layer_name = "Conv_43", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%54, %cst_19, %cst_10 : tensor<1x1024x14x14xf32>, tensor<512x1024x1x1xf32>, tensor<512xf32>) outs(%55 : tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
    %padded_40 = tensor.pad %56 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x512x14x14xf32> to tensor<1x512x16x16xf32>
    %57 = tensor.empty() : tensor<1x512x7x7xf32>
    %58 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 16, 6, 34]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_45", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%padded_40, %cst_20, %cst_10 : tensor<1x512x16x16xf32>, tensor<512x512x3x3xf32>, tensor<512xf32>) outs(%57 : tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32>
    %59 = tensor.empty() : tensor<1x2048x7x7xf32>
    %60 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_22 : tensor<2048xf32>) outs(%59 : tensor<1x2048x7x7xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x2048x7x7xf32>
    %61 = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 4, 32]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<512> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 2048]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 2, 2]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_44", mllib_conv_type = 0 : index, strides = dense<2> : tensor<2xi64>} ins(%54, %cst_23 : tensor<1x1024x14x14xf32>, tensor<2048x1024x1x1xf32>) outs(%60 : tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32>
    %62 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 2048]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_46", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%58, %cst_21, %cst_22, %61 : tensor<1x512x7x7xf32>, tensor<2048x512x1x1xf32>, tensor<2048xf32>, tensor<1x2048x7x7xf32>) outs(%59 : tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32>
    %63 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_47", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%62, %cst_24, %cst_10 : tensor<1x2048x7x7xf32>, tensor<512x2048x1x1xf32>, tensor<512xf32>) outs(%57 : tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32>
    %padded_41 = tensor.pad %63 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x512x7x7xf32> to tensor<1x512x9x9xf32>
    %64 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 4, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_48", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_41, %cst_20, %cst_10 : tensor<1x512x9x9xf32>, tensor<512x512x3x3xf32>, tensor<512xf32>) outs(%57 : tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32>
    %65 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 2048]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_49", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%64, %cst_21, %cst_22, %62 : tensor<1x512x7x7xf32>, tensor<2048x512x1x1xf32>, tensor<2048xf32>, tensor<1x2048x7x7xf32>) outs(%59 : tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32>
    %66 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 128, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<256> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_50", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%65, %cst_24, %cst_10 : tensor<1x2048x7x7xf32>, tensor<512x2048x1x1xf32>, tensor<512xf32>) outs(%57 : tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32>
    %padded_42 = tensor.pad %66 low[0, 0, 1, 1] high[0, 0, 1, 1] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %cst_25 : f32
    } : tensor<1x512x7x7xf32> to tensor<1x512x9x9xf32>
    %67 = linalg.conv_2d_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<[0, 0, 0, 2]> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 4, 18]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 16, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<128> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 512]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_51", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%padded_42, %cst_20, %cst_10 : tensor<1x512x9x9xf32>, tensor<512x512x3x3xf32>, tensor<512xf32>) outs(%57 : tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32>
    %68 = linalg.conv_2d_tensor_add_relu {dilations = dense<1> : tensor<2xi64>, herd_size = dense<4> : vector<2xindex>, l1_nchw_extend_end_input = dense<0> : vector<4xindex>, l1_nchw_extend_end_output = dense<0> : vector<4xindex>, l1_nchw_tile_count_input = dense<[1, 32, 2, 16]> : vector<4xindex>, l1_nchw_tile_count_output = dense<[1, 64, 2, 16]> : vector<4xindex>, l1_tile_permute = dense<[2, 1, 3, 4, 0]> : vector<5xindex>, l2_f_tile_count_weights = dense<1024> : vector<1xindex>, l2_nc_tile_count_output = dense<[1, 2048]> : vector<2xindex>, l2_nchw_extend_end_input = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_input2 = dense<[0, 0, 1, 9]> : vector<4xindex>, l2_nchw_extend_end_output = dense<[0, 0, 1, 9]> : vector<4xindex>, layer_name = "Conv_52", mllib_conv_type = 0 : index, strides = dense<1> : tensor<2xi64>} ins(%67, %cst_21, %cst_22, %65 : tensor<1x512x7x7xf32>, tensor<2048x512x1x1xf32>, tensor<2048xf32>, tensor<1x2048x7x7xf32>) outs(%59 : tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32>
    return %68 : tensor<1x2048x7x7xf32>
  }
}

